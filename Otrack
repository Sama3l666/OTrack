// ==UserScript==
// @name         OTrack - Alliance Progress Tracker
// @namespace    http://tampermonkey.net/
// @version      2.2.1
// @description  Suivi de la progression des membres d'alliance pour OGame (Universel + Historique)
// @author       Samael
// @match        *://*.ogame.gameforge.com/*
// @match        *://s*-*.ogame.gameforge.com/*
// @grant        GM_getValue
// @grant        GM_setValue
// @grant        GM_deleteValue
// @grant        GM_listValues
// @run-at       document-idle
// ==/UserScript==

(function() {
    'use strict';

    // === CONFIGURATION ===
    const CONFIG = {
        storagePrefix: 'otrack_',
        maxSnapshots: 100,
        historyDays: 30 // Historique sur 30 jours
    };

    // === GESTION DU STOCKAGE ===
    const Storage = {
        saveSnapshot: function(playerData) {
            const key = `${CONFIG.storagePrefix}snapshot_${playerData.playerId}_${Date.now()}`;
            GM_setValue(key, JSON.stringify(playerData));
            console.log('Snapshot saved:', key);
        },

        getPlayerSnapshots: function(playerId) {
            const allKeys = GM_listValues();
            const snapshots = [];
            const thirtyDaysAgo = Date.now() - (CONFIG.historyDays * 24 * 60 * 60 * 1000);

            allKeys.forEach(key => {
                if (key.startsWith(`${CONFIG.storagePrefix}snapshot_${playerId}_`)) {
                    try {
                        const data = JSON.parse(GM_getValue(key));
                        const timestamp = parseInt(key.split('_').pop());

                        // Ne garder que les snapshots des 30 derniers jours
                        if (timestamp >= thirtyDaysAgo) {
                            snapshots.push({ ...data, timestamp });
                        }
                    } catch (e) {
                        console.error('Error parsing snapshot:', e);
                    }
                }
            });

            return snapshots.sort((a, b) => a.timestamp - b.timestamp);
        },

        getAllSnapshots: function() {
            const allKeys = GM_listValues();
            const snapshots = [];
            const thirtyDaysAgo = Date.now() - (CONFIG.historyDays * 24 * 60 * 60 * 1000);

            allKeys.forEach(key => {
                if (key.startsWith(`${CONFIG.storagePrefix}snapshot_`)) {
                    try {
                        const data = JSON.parse(GM_getValue(key));
                        const timestamp = parseInt(key.split('_').pop());

                        // Ne garder que les snapshots des 30 derniers jours
                        if (timestamp >= thirtyDaysAgo) {
                            snapshots.push({ ...data, timestamp });
                        }
                    } catch (e) {
                        console.error('Error parsing snapshot:', e);
                    }
                }
            });

            return snapshots;
        },

        cleanOldSnapshots: function() {
            const allKeys = GM_listValues();
            const snapshotKeys = allKeys.filter(k => k.startsWith(`${CONFIG.storagePrefix}snapshot_`));
            const thirtyDaysAgo = Date.now() - (CONFIG.historyDays * 24 * 60 * 60 * 1000);

            let deletedCount = 0;

            // Supprimer les snapshots trop vieux (> 30 jours)
            snapshotKeys.forEach(key => {
                const timestamp = parseInt(key.split('_').pop());
                if (timestamp < thirtyDaysAgo) {
                    GM_deleteValue(key);
                    deletedCount++;
                }
            });

            if (deletedCount > 0) {
                console.log(`Cleaned ${deletedCount} snapshots older than ${CONFIG.historyDays} days`);
            }
        },

        clearAll: function() {
            const allKeys = GM_listValues();
            allKeys.forEach(key => {
                if (key.startsWith(CONFIG.storagePrefix)) {
                    GM_deleteValue(key);
                }
            });
            console.log('All data cleared');
        }
    };

    // === EXTRACTION DES DONNÉES ===
    const DataExtractor = {
        cleanNumber: function(text) {
            if (!text) return 0;
            const cleaned = text.replace(/\s/g, '').replace(/\./g, '').replace(/,/g, '').replace(/k/gi, '000').replace(/M/gi, '000000');
            return parseInt(cleaned) || 0;
        },

        waitForMemberData: function(maxWait = 10000) {
            return new Promise((resolve) => {
                const startTime = Date.now();

                const checkData = () => {
                    // Chercher spécifiquement la table avec les colonnes de membres
                    const tables = document.querySelectorAll('table');

                    console.log(`Recherche parmi ${tables.length} tables...`);

                    for (let i = 0; i < tables.length; i++) {
                        const table = tables[i];
                        const headerText = table.textContent;
                        const rows = table.querySelectorAll('tr');
                        const cells = table.querySelectorAll('td');

                        console.log(`Table ${i}: ${rows.length} lignes, ${cells.length} cellules, classe: "${table.className}"`);

                        // Vérifier si c'est bien la table des membres avec les bons headers (multi-langue)
                        const hasNomColumn = headerText.includes('Nom') ||
                                             headerText.includes('Name') ||
                                             headerText.includes('Nome') ||
                                             headerText.includes('Nombre');
                        const hasRangColumn = headerText.includes('Rang') ||
                                              headerText.includes('Rank') ||
                                              headerText.includes('Rango');
                        const hasPlaceColumn = headerText.includes('Place') ||
                                               headerText.includes('Position') ||
                                               headerText.includes('Posición');

                        // Vérifier qu'elle ne contient PAS de timers (pour éviter la table des flottes)
                        const hasTimers = /\d+m\s*\d+s/.test(headerText) || /\d+h\s*\d+m/.test(headerText);
                        const hasEventColumns = headerText.includes('Événements') ||
                                                headerText.includes('Events') ||
                                                headerText.includes('Eventos') ||
                                                headerText.includes('Type:');

                        // Vérifier qu'elle ne contient PAS d'infos générales d'alliance
                        const hasAllianceInfo = headerText.includes('Name:') ||
                                                headerText.includes('Tag:') ||
                                                headerText.includes('Created:') ||
                                                headerText.includes('Member:') ||
                                                headerText.includes('Homepage:') ||
                                                headerText.includes('Your Rank:');

                        // La table des membres doit avoir les bonnes colonnes ET ne pas avoir de timers ou infos alliance
                        const isMemberTable = hasNomColumn && hasRangColumn && !hasTimers && !hasEventColumns && !hasAllianceInfo;

                        console.log(`  Tests: Nom=${hasNomColumn}, Rang=${hasRangColumn}, Place=${hasPlaceColumn}, Timers=${hasTimers}, Events=${hasEventColumns}, AllianceInfo=${hasAllianceInfo} => Member=${isMemberTable}`);

                        if (isMemberTable && rows.length > 1) {
                            console.log(`✓ Table des membres trouvée! (Table ${i})`);
                            resolve(table);
                            return;
                        }
                    }

                    if (Date.now() - startTime < maxWait) {
                        setTimeout(checkData, 500);
                    } else {
                        console.log('⏱️ Timeout - Aucune table de membres trouvée');
                        resolve(null);
                    }
                };

                checkData();
            });
        },

        extractAllianceData: async function() {
            const members = [];
            const seenPlayers = new Set();
            console.log('=== DÉBUT EXTRACTION v2.0 ===');

            const memberTable = await this.waitForMemberData();

            if (!memberTable) {
                console.log('❌ Aucune table trouvée');
                return members;
            }

            console.log('✓ Table trouvée:', memberTable.className);

            const rows = memberTable.querySelectorAll('tr');
            console.log(`Nombre de lignes: ${rows.length}`);

            rows.forEach((row, index) => {
                try {
                    const cells = row.querySelectorAll('td');
                    if (cells.length === 0) return; // Ignorer les lignes vides ou header

                    // Debug détaillé pour les 3 premières lignes
                    if (index < 6) {
                        console.log(`\n=== LIGNE ${index} - ${cells.length} cellules ===`);
                    }

                    let playerName = null;
                    let playerId = null;
                    let cellWithPlayer = null;

                    // Chercher dans chaque cellule
                    for (let i = 0; i < cells.length; i++) {
                        const cell = cells[i];
                        const cellText = cell.textContent.trim();
                        const links = cell.querySelectorAll('a');

                        if (index < 6) {
                            console.log(`Cellule ${i}: "${cellText.substring(0, 40)}..." (${links.length} liens)`);
                        }

                        // STRATÉGIE: Chercher des cellules qui ressemblent à des pseudos
                        // Sans dépendre de noms de rangs spécifiques
                        const isPotentialNameCell = cellText.length >= 2 &&  // Au moins 2 caractères
                                                     cellText.length < 30 &&  // Moins de 30 caractères
                                                     !/^\d+$/.test(cellText) && // Pas uniquement des chiffres
                                                     !/^\[[\d:]+\]$/.test(cellText) && // Pas des coordonnées [1:2:3]
                                                     !/\d+m\s*\d+s/.test(cellText) && // Pas de timer (24m 6s)
                                                     !/\d+h\s*\d+m/.test(cellText) && // Pas de timer (1h 24m)
                                                     !/^\d+:\d+:\d+$/.test(cellText) && // Pas d'heure (20:48:39)
                                                     !cellText.includes('...') && // Pas de texte tronqué
                                                     !cellText.toLowerCase().includes('alliance') &&
                                                     !cellText.toLowerCase().includes('ouvrir') &&
                                                     !cellText.toLowerCase().includes('donner') &&
                                                     !cellText.toLowerCase().includes('open') &&
                                                     !cellText.toLowerCase().includes('give') &&
                                                     !cellText.toLowerCase().includes('abrir') &&
                                                     !cellText.toLowerCase().includes('profondeu') &&
                                                     !/^\d{2}\.\d{2}\.\d{4}/.test(cellText); // Pas de date

                        // Si la cellule contient du texte sans lien et ressemble à un pseudo
                        if (links.length === 0 && isPotentialNameCell) {
                            playerName = cellText;
                            // Générer un ID unique basé sur le nom + position
                            playerId = `player_${cellText}_${i}`;
                            cellWithPlayer = i;

                            console.log(`✓ Ligne ${index}, Cellule ${i}: Pseudo sans lien trouvé = "${playerName}"`);
                            break;
                        }

                        if (links.length === 0) continue;

                        // Analyser chaque lien de la cellule (si présent)
                        for (let linkIdx = 0; linkIdx < links.length; linkIdx++) {
                            const link = links[linkIdx];
                            const text = link.textContent.trim();
                            const href = link.getAttribute('href') || '';

                            if (index < 6) {
                                console.log(`  Lien ${linkIdx}: "${text}" | href: ${href.substring(0, 50)}...`);
                            }

                            const isOnlyNumbers = /^\d+$/.test(text);
                            const isRankFormat = /^\[[\d:]+\]$/.test(text);
                            const hasProperLength = text.length >= 2;
                            const hasValidHref = href.length > 5;
                            const isNotAllianceLink = !text.toLowerCase().includes('alliance') &&
                                                      !text.toLowerCase().includes('ouvrir') &&
                                                      !text.toLowerCase().includes('donner') &&
                                                      !text.toLowerCase().includes('open') &&
                                                      !text.toLowerCase().includes('give');

                            if (index < 6) {
                                console.log(`    Tests: numbers=${isOnlyNumbers}, rank=${isRankFormat}, length=${hasProperLength}, href=${hasValidHref}, notAlliance=${isNotAllianceLink}`);
                            }

                            if (!isOnlyNumbers && !isRankFormat && hasProperLength && hasValidHref && isNotAllianceLink) {
                                playerName = text;
                                playerId = href;
                                cellWithPlayer = i;

                                console.log(`✓ Ligne ${index}, Cellule ${i}: Pseudo avec lien trouvé = "${playerName}"`);
                                break;
                            }
                        }

                        if (playerName) break; // Pseudo trouvé, passer à la ligne suivante
                    }

                    if (!playerName || !playerId) {
                        if (index < 8) console.log(`Ligne ${index}: Aucun pseudo valide trouvé`);
                        return;
                    }

                    // Éviter les doublons
                    if (seenPlayers.has(playerId)) {
                        console.log(`⚠ Doublon ignoré: ${playerName}`);
                        return;
                    }
                    seenPlayers.add(playerId);

                    // Extraire les VRAIS points depuis le tooltip
                    let points = 0;
                    let economyPoints = 0;
                    let researchPoints = 0;
                    let militaryPoints = 0;

                    // Chercher l'élément avec data-tooltip-title contenant les points
                    for (let cell of cells) {
                        const tooltipTitle = cell.getAttribute('data-tooltip-title');
                        if (tooltipTitle && (tooltipTitle.includes('Points') || tooltipTitle.includes('points') || tooltipTitle.includes('Puntos'))) {
                            // Format multi-langue: "1.746.238 Points" ou "1,746,238 Points"
                            const pointsMatch = tooltipTitle.match(/([\d.,\s]+)\s*(Points|points|Puntos|Punkte)/i);
                            if (pointsMatch) {
                                const pointsStr = pointsMatch[1].replace(/\./g, '').replace(/,/g, '').replace(/\s/g, '');
                                points = parseInt(pointsStr) || 0;
                                console.log(`  → Points extraits du tooltip: ${points.toLocaleString()}`);
                                break;
                            }
                        }
                    }

                    // Si pas de points trouvés dans le tooltip, extraire les grands nombres (fallback)
                    if (points === 0) {
                        let numbers = [];
                        cells.forEach(cell => {
                            const text = cell.textContent.trim();
                            const num = this.cleanNumber(text);
                            if (num > 1000) {
                                numbers.push(num);
                            }
                        });
                        numbers.sort((a, b) => b - a);
                        points = numbers[0] || 0;
                    }

                    const member = {
                        playerId: playerId,
                        name: playerName,
                        points: points,
                        economyPoints: economyPoints,
                        researchPoints: researchPoints,
                        militaryPoints: militaryPoints,
                        capturedAt: new Date().toISOString()
                    };

                    console.log(`✓ Membre #${members.length + 1}: ${playerName} - ${member.points.toLocaleString()} pts`);
                    members.push(member);

                } catch (e) {
                    console.error(`Erreur ligne ${index}:`, e);
                }
            });

            console.log(`=== FIN EXTRACTION: ${members.length} membres ===`);
            return members;
        },

        isAlliancePage: function() {
            const url = window.location.href;
            // Vérifier l'URL ET la présence du texte "Liste des membres"
            const hasAllianceInUrl = url.includes('component=alliance') || url.includes('page=alliance');
            const hasMemberListText = document.body.textContent.includes('Liste des membres');
            const hasMemberTable = document.querySelector('table') !== null;

            return hasAllianceInUrl && (hasMemberListText || hasMemberTable);
        }
    };

    // === INTERFACE UTILISATEUR ===
    const UI = {
        overlayVisible: false,

        createOverlay: function() {
            if (document.getElementById('otrack-overlay')) return;

            const overlay = document.createElement('div');
            overlay.id = 'otrack-overlay';
            overlay.innerHTML = `
                <style>
                    #otrack-overlay {
                        position: fixed;
                        top: 50%;
                        left: 50%;
                        transform: translate(-50%, -50%);
                        width: 90%;
                        max-width: 900px;
                        max-height: 85vh;
                        background: linear-gradient(135deg, #0a0e27 0%, #1a1f3a 100%);
                        border: 3px solid #3a7bd5;
                        border-radius: 15px;
                        box-shadow: 0 20px 60px rgba(0, 0, 0, 0.8);
                        z-index: 999999;
                        overflow: hidden;
                        font-family: 'Segoe UI', Arial, sans-serif;
                        display: none;
                    }
                    .otrack-header {
                        background: linear-gradient(135deg, #3a7bd5 0%, #00d2ff 100%);
                        padding: 18px 25px;
                        display: flex;
                        justify-content: space-between;
                        align-items: center;
                        border-bottom: 2px solid #00d2ff;
                    }
                    .otrack-header h3 {
                        margin: 0;
                        color: #fff;
                        font-size: 22px;
                        font-weight: bold;
                        text-shadow: 2px 2px 4px rgba(0,0,0,0.3);
                    }
                    .otrack-close {
                        background: rgba(255, 255, 255, 0.2);
                        border: 2px solid white;
                        color: white;
                        font-size: 26px;
                        width: 40px;
                        height: 40px;
                        border-radius: 50%;
                        cursor: pointer;
                        transition: all 0.3s;
                        line-height: 1;
                        font-weight: bold;
                    }
                    .otrack-close:hover {
                        background: rgba(255, 255, 255, 0.4);
                        transform: rotate(90deg);
                    }
                    .otrack-content {
                        padding: 25px;
                        overflow-y: auto;
                        max-height: calc(85vh - 80px);
                        color: #fff;
                    }
                    .otrack-actions {
                        display: flex;
                        gap: 12px;
                        margin-bottom: 20px;
                        flex-wrap: wrap;
                    }
                    .otrack-btn {
                        flex: 1;
                        min-width: 140px;
                        padding: 14px 22px;
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                        border: none;
                        color: white;
                        font-size: 15px;
                        font-weight: bold;
                        border-radius: 8px;
                        cursor: pointer;
                        transition: all 0.3s;
                        box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
                    }
                    .otrack-btn:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 6px 20px rgba(102, 126, 234, 0.6);
                    }
                    .otrack-btn:disabled {
                        opacity: 0.5;
                        cursor: not-allowed;
                    }
                    .otrack-btn.danger {
                        background: linear-gradient(135deg, #f093fb 0%, #f5576c 100%);
                    }
                    .otrack-status {
                        padding: 15px;
                        margin-bottom: 20px;
                        background: rgba(58, 123, 213, 0.2);
                        border-left: 4px solid #3a7bd5;
                        border-radius: 6px;
                        min-height: 24px;
                        font-size: 14px;
                        font-weight: 500;
                    }
                    .otrack-results {
                        margin-top: 20px;
                    }
                    .otrack-table {
                        width: 100%;
                        border-collapse: collapse;
                        background: rgba(255, 255, 255, 0.05);
                        border-radius: 10px;
                        overflow: hidden;
                        font-size: 13px;
                    }
                    .otrack-table thead {
                        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                    }
                    .otrack-table th {
                        padding: 14px 10px;
                        text-align: left;
                        font-weight: bold;
                        color: #fff;
                        font-size: 13px;
                    }
                    .otrack-table td {
                        padding: 12px 10px;
                        border-bottom: 1px solid rgba(255, 255, 255, 0.1);
                    }
                    .otrack-table tbody tr:hover {
                        background: rgba(58, 123, 213, 0.3);
                    }
                    .otrack-positive { color: #4ade80; font-weight: bold; }
                    .otrack-negative { color: #f87171; font-weight: bold; }
                    .otrack-neutral { color: #94a3b8; }
                    .otrack-content::-webkit-scrollbar {
                        width: 10px;
                    }
                    .otrack-content::-webkit-scrollbar-track {
                        background: rgba(255, 255, 255, 0.1);
                        border-radius: 10px;
                    }
                    .otrack-content::-webkit-scrollbar-thumb {
                        background: #3a7bd5;
                        border-radius: 10px;
                    }
                    .otrack-success {
                        background: rgba(76, 175, 80, 0.2);
                        border-left: 4px solid #4caf50;
                        padding: 15px;
                        border-radius: 6px;
                        margin-bottom: 15px;
                    }
                    .otrack-warning {
                        background: rgba(255, 152, 0, 0.2);
                        border-left: 4px solid #ff9800;
                        padding: 15px;
                        border-radius: 6px;
                        margin-bottom: 15px;
                    }
                    .otrack-info {
                        background: rgba(33, 150, 243, 0.2);
                        border-left: 4px solid #2196F3;
                        padding: 15px;
                        border-radius: 6px;
                        margin-bottom: 15px;
                        font-size: 13px;
                    }
                    .otrack-alliance-total {
                        background: linear-gradient(135deg, rgba(102, 126, 234, 0.3) 0%, rgba(118, 75, 162, 0.3) 100%);
                        border: 2px solid #667eea;
                        padding: 15px;
                        border-radius: 8px;
                        margin-bottom: 20px;
                        font-weight: bold;
                    }
                    .otrack-kofi {
                        text-align: center;
                        padding: 12px;
                        margin-top: 15px;
                    }
                    .otrack-kofi a {
                        display: inline-block;
                        padding: 10px 20px;
                        background: linear-gradient(135deg, #FF5E5B 0%, #FF1744 100%);
                        color: white !important;
                        text-decoration: none !important;
                        border-radius: 25px;
                        font-weight: bold;
                        transition: all 0.3s;
                        box-shadow: 0 4px 15px rgba(255, 23, 68, 0.4);
                    }
                    .otrack-kofi a:hover {
                        transform: translateY(-2px);
                        box-shadow: 0 6px 20px rgba(255, 23, 68, 0.6);
                    }
                </style>
                <div class="otrack-header">
                    <h3>📊 OTrack - Progression Alliance</h3>
                    <button class="otrack-close" id="otrack-close">×</button>
                </div>
                <div class="otrack-content">
                    <div class="otrack-actions">
                        <button class="otrack-btn" id="otrack-capture">📸 Capturer</button>
                        <button class="otrack-btn" id="otrack-view">📈 Progression</button>
                        <button class="otrack-btn danger" id="otrack-clear">🗑️ Réinitialiser</button>
                    </div>
                    <div class="otrack-status" id="otrack-status">
                        Prêt à capturer les données de l'alliance
                    </div>
                    <div class="otrack-results" id="otrack-results"></div>
                    <div class="otrack-kofi">
                        <a href="https://ko-fi.com/sama3l666" target="_blank">☕ Soutenir le développeur sur Ko-fi</a>
                    </div>
                </div>
            `;

            document.body.appendChild(overlay);

            document.getElementById('otrack-close').addEventListener('click', () => this.hideOverlay());
            document.getElementById('otrack-capture').addEventListener('click', () => this.captureData());
            document.getElementById('otrack-view').addEventListener('click', () => this.showProgress());
            document.getElementById('otrack-clear').addEventListener('click', () => this.clearData());
        },

        showOverlay: function() {
            const overlay = document.getElementById('otrack-overlay');
            if (overlay) {
                overlay.style.display = 'block';
                this.overlayVisible = true;
            }
        },

        hideOverlay: function() {
            const overlay = document.getElementById('otrack-overlay');
            if (overlay) {
                overlay.style.display = 'none';
                this.overlayVisible = false;
            }
        },

        toggleOverlay: function() {
            if (this.overlayVisible) {
                this.hideOverlay();
            } else {
                this.showOverlay();
            }
        },

        setStatus: function(message, isError = false) {
            const statusDiv = document.getElementById('otrack-status');
            if (statusDiv) {
                statusDiv.textContent = message;
                statusDiv.style.borderLeftColor = isError ? '#f5576c' : '#3a7bd5';
                statusDiv.style.background = isError ? 'rgba(245, 87, 108, 0.2)' : 'rgba(58, 123, 213, 0.2)';
            }
        },

        captureData: async function() {
            const captureBtn = document.getElementById('otrack-capture');
            const resultsDiv = document.getElementById('otrack-results');

            captureBtn.disabled = true;
            captureBtn.textContent = '⏳ Capture...';
            this.setStatus('⏳ Extraction des données en cours...');
            resultsDiv.innerHTML = '';

            try {
                const members = await DataExtractor.extractAllianceData();

                if (members.length === 0) {
                    resultsDiv.innerHTML = `
                        <div class="otrack-warning">
                            <strong>⚠️ Aucune donnée trouvée</strong><br><br>
                            Assurez-vous d'être sur l'onglet <strong>"Liste des membres"</strong> de votre alliance.
                        </div>
                    `;
                    this.setStatus('❌ Aucune donnée trouvée', true);
                } else {
                    members.forEach(member => {
                        Storage.saveSnapshot(member);
                    });

                    Storage.cleanOldSnapshots();

                    resultsDiv.innerHTML = `
                        <div class="otrack-success">
                            <strong>✅ Capture réussie!</strong><br>
                            <strong>${members.length}</strong> membres capturés<br><br>
                            <strong>Exemples:</strong><br>
                            ${members.slice(0, Math.min(5, members.length)).map(m =>
                                `• <strong>${m.name}</strong>: ${m.points > 0 ? m.points.toLocaleString() + ' points' : 'Points en attente'}`
                            ).join('<br>')}
                            ${members.length > 5 ? '<br>...' : ''}
                        </div>
                    `;

                    this.setStatus(`✅ ${members.length} membres capturés avec succès!`);
                }
            } catch (error) {
                console.error('Erreur de capture:', error);
                this.setStatus('❌ Erreur lors de la capture', true);
                resultsDiv.innerHTML = `<div class="otrack-warning">Erreur: ${error.message}</div>`;
            } finally {
                captureBtn.disabled = false;
                captureBtn.textContent = '📸 Capturer';
            }
        },

        showProgress: async function() {
            const resultsDiv = document.getElementById('otrack-results');
            resultsDiv.innerHTML = '<p style="text-align: center;">⏳ Calcul de la progression...</p>';

            const members = await DataExtractor.extractAllianceData();

            if (members.length === 0) {
                resultsDiv.innerHTML = `
                    <div class="otrack-warning">
                        ⚠️ Aucune donnée actuelle. Allez sur "Liste des membres" de votre alliance.
                    </div>
                `;
                return;
            }

            // Calculer la progression globale de l'alliance
            let totalCurrentPoints = 0;
            let totalOldPoints = 0;
            let oldestTimestamp = Date.now();

            // Créer un tableau avec les progressions calculées
            const progressData = [];

            members.forEach(member => {
                totalCurrentPoints += member.points;

                const snapshots = Storage.getPlayerSnapshots(member.playerId);

                if (snapshots.length < 2) {
                    progressData.push({
                        name: member.name,
                        points: member.points,
                        diff: null,
                        percentage: null,
                        timeText: null,
                        hasData: false
                    });
                    return;
                }

                const oldest = snapshots[0];
                totalOldPoints += oldest.points;
                if (oldest.timestamp < oldestTimestamp) {
                    oldestTimestamp = oldest.timestamp;
                }

                const diff = member.points - oldest.points;
                const percentage = oldest.points > 0 ? ((diff / oldest.points) * 100).toFixed(2) : 0;
                const days = Math.floor((Date.now() - oldest.timestamp) / (1000 * 60 * 60 * 24));
                const hours = Math.floor((Date.now() - oldest.timestamp) / (1000 * 60 * 60));
                const timeText = days > 0 ? `${days}j` : `${hours}h`;

                progressData.push({
                    name: member.name,
                    points: member.points,
                    diff: diff,
                    percentage: parseFloat(percentage),
                    timeText: timeText,
                    hasData: true
                });
            });

            // Calculer la progression de l'alliance
            const allianceDiff = totalCurrentPoints - totalOldPoints;
            const alliancePercentage = totalOldPoints > 0 ? ((allianceDiff / totalOldPoints) * 100).toFixed(2) : 0;
            const allianceDays = Math.floor((Date.now() - oldestTimestamp) / (1000 * 60 * 60 * 24));
            const allianceHours = Math.floor((Date.now() - oldestTimestamp) / (1000 * 60 * 60));
            const allianceTimeText = allianceDays > 0 ? `${allianceDays}j` : `${allianceHours}h`;
            const allianceArrow = allianceDiff > 0 ? '📈' : allianceDiff < 0 ? '📉' : '➡️';

            // TRIER par progression (du plus grand au plus petit)
            progressData.sort((a, b) => {
                if (!a.hasData && !b.hasData) return 0;
                if (!a.hasData) return 1;
                if (!b.hasData) return -1;
                return (b.diff || 0) - (a.diff || 0);
            });

            let html = `
                <div class="otrack-info">
                    ℹ️ <strong>Historique :</strong> Données des ${CONFIG.historyDays} derniers jours
                </div>
                <div class="otrack-alliance-total">
                    <div style="font-size: 18px; margin-bottom: 10px;">🏆 PROGRESSION DE L'ALLIANCE</div>
                    <div style="display: flex; justify-content: space-around; flex-wrap: wrap; gap: 15px;">
                        <div>
                            <div style="color: #94a3b8; font-size: 12px;">Points Actuels</div>
                            <div style="font-size: 20px;">${totalCurrentPoints.toLocaleString()}</div>
                        </div>
                        <div>
                            <div style="color: #94a3b8; font-size: 12px;">Évolution</div>
                            <div style="font-size: 20px; color: ${allianceDiff > 0 ? '#4ade80' : allianceDiff < 0 ? '#f87171' : '#94a3b8'};">
                                ${allianceArrow} ${allianceDiff.toLocaleString()}
                            </div>
                        </div>
                        <div>
                            <div style="color: #94a3b8; font-size: 12px;">% Change</div>
                            <div style="font-size: 20px; color: ${allianceDiff > 0 ? '#4ade80' : allianceDiff < 0 ? '#f87171' : '#94a3b8'};">
                                ${alliancePercentage > 0 ? '+' : ''}${alliancePercentage}%
                            </div>
                        </div>
                        <div>
                            <div style="color: #94a3b8; font-size: 12px;">Période</div>
                            <div style="font-size: 20px;">${allianceTimeText}</div>
                        </div>
                    </div>
                </div>
                <table class="otrack-table">
                    <thead>
                        <tr>
                            <th>#</th>
                            <th>Joueur</th>
                            <th>Points Actuels</th>
                            <th>Évolution</th>
                            <th>% Change</th>
                            <th>Période</th>
                        </tr>
                    </thead>
                    <tbody>
            `;

            let hasData = false;
            let rank = 1;

            progressData.forEach(data => {
                if (!data.hasData) {
                    html += `
                        <tr>
                            <td class="otrack-neutral">-</td>
                            <td><strong>${data.name}</strong></td>
                            <td>${data.points > 0 ? data.points.toLocaleString() : 'N/A'}</td>
                            <td colspan="3" class="otrack-neutral">
                                Première capture ou pas encore de données
                            </td>
                        </tr>
                    `;
                    return;
                }

                hasData = true;
                const arrow = data.diff > 0 ? '📈' : data.diff < 0 ? '📉' : '➡️';
                const colorClass = data.diff > 0 ? 'otrack-positive' : data.diff < 0 ? 'otrack-negative' : 'otrack-neutral';
                const rankEmoji = rank === 1 ? '🥇' : rank === 2 ? '🥈' : rank === 3 ? '🥉' : rank;

                html += `
                    <tr>
                        <td style="font-weight: bold;">${rankEmoji}</td>
                        <td><strong>${data.name}</strong></td>
                        <td>${data.points.toLocaleString()}</td>
                        <td class="${colorClass}">${arrow} ${data.diff.toLocaleString()}</td>
                        <td class="${colorClass}">${data.percentage > 0 ? '+' : ''}${data.percentage}%</td>
                        <td>${data.timeText}</td>
                    </tr>
                `;
                rank++;
            });

            html += '</tbody></table>';

            if (!hasData) {
                html += `
                    <div class="otrack-warning" style="margin-top: 15px;">
                        ℹ️ <strong>Conseil:</strong> Capturez les données régulièrement pour voir les progressions.
                    </div>
                `;
            }

            resultsDiv.innerHTML = html;
        },

        clearData: function() {
            if (confirm('⚠️ Supprimer toutes les données sauvegardées ?\n\nCette action est irréversible.')) {
                Storage.clearAll();
                this.setStatus('✅ Données supprimées');
                document.getElementById('otrack-results').innerHTML = '';
            }
        },

        addButton: function() {
            // N'ajouter le bouton QUE sur la page alliance
            if (!DataExtractor.isAlliancePage()) {
                console.log('OTrack: Pas sur la page alliance, bouton non affiché');
                return;
            }

            // Éviter les doublons
            if (document.getElementById('otrack-trigger-btn')) return;

            const button = document.createElement('button');
            button.id = 'otrack-trigger-btn';
            button.innerHTML = '📊';
            button.title = 'OTrack - Tracker d\'alliance';
            button.style.cssText = `
                position: fixed;
                top: 10px;
                right: 10px;
                z-index: 999998;
                padding: 12px 16px;
                background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
                color: white;
                border: none;
                border-radius: 50%;
                font-weight: bold;
                cursor: pointer;
                font-size: 20px;
                box-shadow: 0 4px 15px rgba(102, 126, 234, 0.4);
                transition: all 0.3s;
                width: 50px;
                height: 50px;
                display: flex;
                align-items: center;
                justify-content: center;
            `;

            button.addEventListener('mouseenter', function() {
                this.style.transform = 'scale(1.1) rotate(5deg)';
                this.style.boxShadow = '0 6px 20px rgba(102, 126, 234, 0.6)';
            });

            button.addEventListener('mouseleave', function() {
                this.style.transform = 'scale(1) rotate(0deg)';
                this.style.boxShadow = '0 4px 15px rgba(102, 126, 234, 0.4)';
            });

            button.addEventListener('click', () => this.toggleOverlay());

            document.body.appendChild(button);
            console.log('OTrack: Bouton ajouté sur la page alliance');
        }
    };

    // === INITIALISATION ===
    function init() {
        console.log('OTrack v2.2.1 initialized - Fixed English server detection');

        // Créer l'overlay (toujours, pour permettre l'accès aux données)
        UI.createOverlay();

        // Ajouter le bouton UNIQUEMENT sur la page alliance
        UI.addButton();

        // Observer les changements de page pour réafficher le bouton si nécessaire
        const observer = new MutationObserver(() => {
            if (DataExtractor.isAlliancePage() && !document.getElementById('otrack-trigger-btn')) {
                UI.addButton();
            }
        });

        observer.observe(document.body, {
            childList: true,
            subtree: true
        });
    }

    if (document.readyState === 'loading') {
        document.addEventListener('DOMContentLoaded', init);
    } else {
        init();
    }

})();
